// React에 있는 useEffect와 useState 같은 훅들을 구현해야하지만 바닐라 js에는 없으니 직접 구현해야한다
// 결론 :: React의 useEffect처럼 "페이지 시작할 때", "페이지 끝날 때", "특정 값 바뀔 때"의 코드를 js로 구현

// 고차 함수 패턴을 사용. 컴포넌트를 받아서 컴포넌트로 반환한다!
// 어떤 페이지를 전달받는 것인지 확실하게 파악하기 위해 페이지만 인자를 분리
// 데코레이터 패턴
const lifeCycle = ({ onMount, onUnmount, watches } = {}, page) => {
  console.log(onMount, onUnmount, watches);
  return page;
  // 페이지마다 초기화 작업이 필요해요
  // 데이터를 서버에서 가져와야 하고
  // 타이머를 설정해야 하고
  // 이벤트 리스너를 붙여야 하고...
  // 페이지를 떠날 때 정리 작업이 필요해요
  // 타이머를 꺼야 하고
  // 이벤트 리스너를 제거해야 하고
  // 메모리 누수를 방지해야 하고...
  // 특정 값이 바뀔 때마다 뭔가를 다시 해야 해요
  // 사용자 ID가 바뀌면 새로운 사용자 데이터를 가져와야 하고
  // 필터 조건이 바뀌면 목록을 다시 불러와야 하고...
  // 각 페이지 마다 다른 생명주기 정보가 필요하다.
  // weakMap을 쓰면 함수를 키로 사용할 수 있고 더 이상 사용되지 않으면 자동으로 메모리에서 정리된다.
  // 현재 어떤 페이지가 활성화? 바뀔 때 이전 페이지의 상태는 어떻게 정리하지? -> 이전페이지 상태를 저장(확인)해서 clean up
  // 상태 중에 전역 상태가 있을 수도 있다!
  // 새로운 페이지를 열었을때 세팅되는 기초 정보
  // mount, unmount, deps(mount 후에 추적하는 상태 값들) 등등
  // 처음 보는 페이지인지 확인하는 함수 -> 페이지마다 매번 동작해야해서 함수로 분리
  // deps로 추적하고 있는 상태값들이 바뀌었는지 확인하는 방법! -> useEffect의 의존성 배열
  // 페이지 mount이후에 어떤 기능이 동작해야할까? -> ex. 상태 초기화, ui 받아오기 등등..
  // 같은 페이지가 두 번 호출될수도 있으니 mount가 됐는지 확인하는 전역상태가 필요하다! -> 초기 상태값에 mounted 추가
  // 페이지가 unmount될 때 clean up 하는 로직이 필요하다!
  // 위의 모든 기능들을 한 번에 모든 페이지에서 사용하려면 wrapper처럼 감싸서 사용해야한다.
  // 내부에는 페이지 컴포넌트를 전달 받고 mount, unmount, 상태값 관리하는 로직도 함께 받아서 리액트의 라이프사이클을 사용하는 페이지를 구성한다.
};

export default lifeCycle;
